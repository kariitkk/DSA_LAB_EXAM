#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct stack {
    int size;
    int top;
    char *arr;
};

int isEmpty(struct stack *ptr) {
    return ptr->top == -1;
}

int isFull(struct stack *ptr) {
    return ptr->top == ptr->size - 1;
}

void push(struct stack *ptr, char val) {
    if (isFull(ptr)) {
        printf("Stack Overflow!\n");
    } else {
        ptr->arr[++ptr->top] = val;
    }
}

char pop(struct stack *ptr) {
    if (isEmpty(ptr)) {
        printf("Stack Underflow!\n");
        return -1;
    } else {
        return ptr->arr[ptr->top--];
    }
}

char stackTop(struct stack* sp) {
    if (!isEmpty(sp))
        return sp->arr[sp->top];
    return '\0';
}

int precedence(char ch) {
    if (ch == '*' || ch == '/')
        return 3;
    else if (ch == '+' || ch == '-')
        return 2;
    else
        return 0;
}

int isOperator(char ch) {
    return ch == '+' || ch == '-' || ch == '*' || ch == '/';
}

char* infixToPostfix(char* infix) {
    struct stack *sp = (struct stack *)malloc(sizeof(struct stack));
    sp->size = strlen(infix);
    sp->top = -1;
    sp->arr = (char *)malloc(sp->size * sizeof(char));

    char *postfix = (char *)malloc((strlen(infix) + 1) * sizeof(char));
    int i = 0, j = 0;

    while (infix[i] != '\0') {
        char ch = infix[i];

        if (ch == ' ') {
            i++;
            continue;
        }

        if ((ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z') || (ch >= '0' && ch <= '9')) {
            postfix[j++] = ch;
        } 
        else if (ch == '(') {
            push(sp, ch);
        } 
        else if (ch == ')') {
            while (!isEmpty(sp) && stackTop(sp) != '(') {
                postfix[j++] = pop(sp);
            }
            if (!isEmpty(sp) && stackTop(sp) == '(')
                pop(sp); // discard '('
        } 
        else if (isOperator(ch)) {
            while (!isEmpty(sp) && precedence(ch) <= precedence(stackTop(sp))) {
                postfix[j++] = pop(sp);
            }
            push(sp, ch);
        }
        i++;
    }

    while (!isEmpty(sp)) {
        postfix[j++] = pop(sp);
    }

    postfix[j] = '\0';
    free(sp->arr);
    free(sp);
    return postfix;
}

int main() {
    char arr[100];
    printf("Enter the infix expression: ");
    fgets(arr, sizeof(arr), stdin);

    // Remove newline character if present
    arr[strcspn(arr, "\n")] = '\0';

    char* result = infixToPostfix(arr);
    printf("Infix: %s -> Postfix: %s\n", arr, result);

    free(result);
    return 0;
}
